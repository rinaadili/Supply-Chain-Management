/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.view;


import BLL.Permission;

import DAL.SCHMException;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import java.beans.PropertyVetoException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import DAL.ObjectsInterface;
import DAL.PermissionInterface;
import DAL.PermissionRepository;
import gui.model.CityComboBoxModel;
import gui.model.CountryComboBoxModel;
import gui.model.PermissionTableModel;
import java.awt.event.ActionListener;
/**
 *
 * @author EN
 */
public class PermissionForm extends javax.swing.JInternalFrame {

    /**
     * Creates new form EmployeeForm
     */
    PermissionInterface cir = new PermissionRepository();
    PermissionTableModel ctm = new PermissionTableModel();
    
    private static Permission premission;
    public PermissionForm(Permission prem){
        premission = prem;
        initComponents();
        loadTable();
        tabelaSelectedIndexChange();
    }
    private void tabelaSelectedIndexChange() {
        final ListSelectionModel rowSM = tabela.getSelectionModel();
        rowSM.addListSelectionListener(new ListSelectionListener() {

            public void valueChanged(ListSelectionEvent Ise) {
                if (Ise.getValueIsAdjusting()) {
                    return;
                }
                ListSelectionModel rowSM = (ListSelectionModel) Ise.getSource();
                int selectedIndex = rowSM.getAnchorSelectionIndex();
                if (selectedIndex > -1) {
                    Permission c = ctm.getPermission(selectedIndex);
                    emriTF.setText(c.getName() + "");
                    descriptioTF.setText(c.getDescription());
                    empRead.setSelected(c.getEmployeesRead());
                    empManage.setSelected(c.getEmployeesManage());
                    userRead.setSelected(c.getUsersRead());
                    userManage.setSelected(c.getUsersManage());
                    objRead.setSelected(c.getObjectsRead());
                    objManage.setSelected(c.getObjectsManage());
                    cusRead.setSelected(c.getCustomersRead());
                    cusManage.setSelected(c.getCustomersManage());
                    supRead.setSelected(c.getSuppliersRead());
                    supManage.setSelected(c.getSuppliersManage());
                    proRead.setSelected(c.getProductsRead());
                    proManage.setSelected(c.getProductsManage());
                    reqRead.setSelected(c.getRequestRead());
                    reqMake.setSelected(c.getRequestMake());
                    ordRead.setSelected(c.getOrdersRead());
                    salMake.setSelected(c.getSalesMake());
                    couRead.setSelected(c.getCountryRead());
                    couManage.setSelected(c.getCountryManage());
                    cityRead.setSelected(c.getCityRead());
                    cityManage.setSelected(c.getCityManage());
                    titleRead.setSelected(c.getTitleRead());
                    titleManage.setSelected(c.getTitleManage());
                    
                }
            }
        });
    }
    
    public void loadTable() {
        try {
            List<Permission> list = cir.findAll();
            ctm.add(list);
            tabela.setModel(ctm);
            ctm.fireTableDataChanged();
        } catch (SCHMException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }

    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        emriTF = new javax.swing.JTextField();
        descriptioTF = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabela = new javax.swing.JTable();
        saveBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();
        empRead = new javax.swing.JCheckBox();
        empManage = new javax.swing.JCheckBox();
        userRead = new javax.swing.JCheckBox();
        userManage = new javax.swing.JCheckBox();
        objManage = new javax.swing.JCheckBox();
        objRead = new javax.swing.JCheckBox();
        cusRead = new javax.swing.JCheckBox();
        cusManage = new javax.swing.JCheckBox();
        supManage = new javax.swing.JCheckBox();
        supRead = new javax.swing.JCheckBox();
        proManage = new javax.swing.JCheckBox();
        proRead = new javax.swing.JCheckBox();
        reqRead = new javax.swing.JCheckBox();
        reqMake = new javax.swing.JCheckBox();
        ordRead = new javax.swing.JCheckBox();
        salMake = new javax.swing.JCheckBox();
        couRead = new javax.swing.JCheckBox();
        couManage = new javax.swing.JCheckBox();
        cityManage = new javax.swing.JCheckBox();
        cityRead = new javax.swing.JCheckBox();
        titleManage = new javax.swing.JCheckBox();
        titleRead = new javax.swing.JCheckBox();

        setClosable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Permission");

        jLabel1.setText("Description:");

        jLabel4.setText("*Name:");

        emriTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emriTFActionPerformed(evt);
            }
        });

        descriptioTF.setMinimumSize(new java.awt.Dimension(6, 19));
        descriptioTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descriptioTFActionPerformed(evt);
            }
        });

        tabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabela.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tabela);

        saveBtn.setText("Save");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });

        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        cancelBtn.setText("Clear");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        empRead.setText("EmployeesRead");

        empManage.setText("EmployeesManage");
        empManage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                empManageActionPerformed(evt);
            }
        });

        userRead.setText("UsersRead");

        userManage.setText("UsersManage");
        userManage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userManageActionPerformed(evt);
            }
        });

        objManage.setText("ObjectsManage");
        objManage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                objManageActionPerformed(evt);
            }
        });

        objRead.setText("ObjectsRead");
        objRead.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                objReadActionPerformed(evt);
            }
        });

        cusRead.setText("CustomersRead");
        cusRead.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cusReadActionPerformed(evt);
            }
        });

        cusManage.setText("CustomersManage");
        cusManage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cusManageActionPerformed(evt);
            }
        });

        supManage.setText("SuppliersManage");
        supManage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supManageActionPerformed(evt);
            }
        });

        supRead.setText("SuppliersRead");
        supRead.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supReadActionPerformed(evt);
            }
        });

        proManage.setText("ProductsManage");
        proManage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proManageActionPerformed(evt);
            }
        });

        proRead.setText("ProductsRead");
        proRead.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proReadActionPerformed(evt);
            }
        });

        reqRead.setText("RequestRead");
        reqRead.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reqReadActionPerformed(evt);
            }
        });

        reqMake.setText("RequestMake");
        reqMake.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reqMakeActionPerformed(evt);
            }
        });

        ordRead.setText("OrdersRead");
        ordRead.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ordReadActionPerformed(evt);
            }
        });

        salMake.setText("SalesMake");
        salMake.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salMakeActionPerformed(evt);
            }
        });

        couRead.setText("CountryRead");
        couRead.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                couReadActionPerformed(evt);
            }
        });

        couManage.setText("CountryManage");
        couManage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                couManageActionPerformed(evt);
            }
        });

        cityManage.setText("CityManage");
        cityManage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityManageActionPerformed(evt);
            }
        });

        cityRead.setText("CityRead");
        cityRead.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityReadActionPerformed(evt);
            }
        });

        titleManage.setText("TitleManage");
        titleManage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                titleManageActionPerformed(evt);
            }
        });

        titleRead.setText("TitleRead");
        titleRead.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                titleReadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 645, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(saveBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deleteBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cancelBtn))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(empRead)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(empManage)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(userRead)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(userManage)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(objRead)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(objManage))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(emriTF, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(jLabel1)
                                .addGap(16, 16, 16)
                                .addComponent(descriptioTF, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cusRead)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cusManage)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(supRead)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(supManage)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(proRead)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(proManage))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(reqRead)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(reqMake)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ordRead)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(salMake)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(couRead)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(couManage))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cityRead)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cityManage)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(titleRead)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(titleManage)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(emriTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(descriptioTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(empRead)
                    .addComponent(empManage)
                    .addComponent(userRead)
                    .addComponent(userManage)
                    .addComponent(objRead)
                    .addComponent(objManage))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cusRead)
                    .addComponent(cusManage)
                    .addComponent(supRead)
                    .addComponent(supManage)
                    .addComponent(proRead)
                    .addComponent(proManage))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reqRead)
                    .addComponent(reqMake)
                    .addComponent(ordRead)
                    .addComponent(salMake)
                    .addComponent(couRead)
                    .addComponent(couManage))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(titleRead)
                        .addComponent(titleManage))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cityRead)
                        .addComponent(cityManage)))
                .addGap(12, 12, 12)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 439, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveBtn)
                    .addComponent(deleteBtn)
                    .addComponent(cancelBtn))
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void descriptioTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descriptioTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_descriptioTFActionPerformed

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        if (!emriTF.getText().trim().equals("")){
            int row = tabela.getSelectedRow();
            if (row == -1) {
                Permission c = new Permission();
                c.setName(emriTF.getText());
                c.setDescription(descriptioTF.getText());
                c.setEmployeesRead(empRead.isSelected());
                c.setEmployeesManage(empManage.isSelected());
                c.setUsersRead(userRead.isSelected());
                c.setUsersManage(userManage.isSelected());
                c.setObjectsRead(objRead.isSelected());
                c.setObjectsManage(objManage.isSelected());
                c.setCustomersRead(cusRead.isSelected());
                c.setCustomersManage(cusManage.isSelected());
                c.setSuppliersRead(supRead.isSelected());
                c.setSuppliersManage(supManage.isSelected());
                c.setProductsRead(proRead.isSelected());
                c.setProductsManage(proManage.isSelected());
                c.setRequestRead(reqRead.isSelected());
                c.setRequestMake(reqMake.isSelected());
                c.setOrdersRead(ordRead.isSelected());
                c.setSalesMake(salMake.isSelected());
                c.setCountryRead(couRead.isSelected());
                c.setCountryManage(couManage.isSelected());
                c.setCityRead(cityRead.isSelected());
                c.setCityManage(cityManage.isSelected());
                c.setTitleRead(titleRead.isSelected());
                c.setTitleManage(titleManage.isSelected());
                try {
                    cir.create(c);
                } catch (SCHMException es) {
                    JOptionPane.showMessageDialog(this, es.getMessage());
                    return;
                }
            } else {
                Permission c = ctm.getPermission(row);
                c.setName(emriTF.getText());
                c.setDescription(descriptioTF.getText());
                c.setEmployeesRead(empRead.isSelected());
                c.setEmployeesManage(empManage.isSelected());
                c.setUsersRead(userRead.isSelected());
                c.setUsersManage(userManage.isSelected());
                c.setObjectsRead(objRead.isSelected());
                c.setObjectsManage(objManage.isSelected());
                c.setCustomersRead(cusRead.isSelected());
                c.setCustomersManage(cusManage.isSelected());
                c.setSuppliersRead(supRead.isSelected());
                c.setSuppliersManage(supManage.isSelected());
                c.setProductsRead(proRead.isSelected());
                c.setProductsManage(proManage.isSelected());
                c.setRequestRead(reqRead.isSelected());
                c.setRequestMake(reqMake.isSelected());
                c.setOrdersRead(ordRead.isSelected());
                c.setSalesMake(salMake.isSelected());
                c.setCountryRead(couRead.isSelected());
                c.setCountryManage(couManage.isSelected());
                c.setCityRead(cityRead.isSelected());
                c.setCityManage(cityManage.isSelected());
                c.setTitleRead(titleRead.isSelected());
                c.setTitleManage(titleManage.isSelected());
                try {
                    cir.edit(c);
                } catch (SCHMException es) {
                    JOptionPane.showMessageDialog(this, es.getMessage());
                    return;
                }
                
            }
            clearFild();
            loadTable();

        } else {
            JOptionPane.showMessageDialog(this, "Ju lutem plotesoni te gjitha fushat obligative!");
        }
    }//GEN-LAST:event_saveBtnActionPerformed

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        clearFild();
    }//GEN-LAST:event_cancelBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        int row = tabela.getSelectedRow();
        if (row > -1) {
            Object[] ob = {"Po", "Jo"};
            int i = JOptionPane.showOptionDialog(this, "A dëshironi ta fshini ?", "Fshirja", JOptionPane.OK_OPTION, JOptionPane.QUESTION_MESSAGE, null, ob, ob[1]);
            if (i == 0) {
                Permission c = ctm.getPermission(row);
                try {
                    cir.delete(c);
                } catch (SCHMException es) {
                    JOptionPane.showMessageDialog(this, es.getMessage());
                }
                clearFild();
                loadTable();
            } else {
                clearFild();
            }

        } else {
            JOptionPane.showMessageDialog(this, "Nuk keni selektuar asgje per te fshire!");

        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void emriTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emriTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emriTFActionPerformed

    private void empManageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_empManageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_empManageActionPerformed

    private void userManageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userManageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_userManageActionPerformed

    private void objManageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_objManageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_objManageActionPerformed

    private void objReadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_objReadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_objReadActionPerformed

    private void cusManageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cusManageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cusManageActionPerformed

    private void cusReadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cusReadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cusReadActionPerformed

    private void supManageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supManageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_supManageActionPerformed

    private void supReadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supReadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_supReadActionPerformed

    private void proManageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proManageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_proManageActionPerformed

    private void proReadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proReadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_proReadActionPerformed

    private void reqReadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reqReadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_reqReadActionPerformed

    private void reqMakeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reqMakeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_reqMakeActionPerformed

    private void ordReadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ordReadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ordReadActionPerformed

    private void salMakeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salMakeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_salMakeActionPerformed

    private void couReadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_couReadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_couReadActionPerformed

    private void couManageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_couManageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_couManageActionPerformed

    private void cityManageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityManageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cityManageActionPerformed

    private void cityReadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityReadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cityReadActionPerformed

    private void titleManageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_titleManageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_titleManageActionPerformed

    private void titleReadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_titleReadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_titleReadActionPerformed
    public void clearFild() {
        tabela.clearSelection();
        emriTF.setText("");
        descriptioTF.setText("");
        empRead.setSelected(false);
        empManage.setSelected(false);
        userRead.setSelected(false);
        userManage.setSelected(false);
        objRead.setSelected(false);
        objManage.setSelected(false);
        cusRead.setSelected(false);
        cusManage.setSelected(false);
        supRead.setSelected(false);
        supManage.setSelected(false);
        proRead.setSelected(false);
        proManage.setSelected(false);
        reqRead.setSelected(false);
        reqMake.setSelected(false);
        ordRead.setSelected(false);
        salMake.setSelected(false);
        couRead.setSelected(false);
        couManage.setSelected(false);
        cityRead.setSelected(false);
        cityManage.setSelected(false);
        titleRead.setSelected(false);
        titleManage.setSelected(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelBtn;
    private javax.swing.JCheckBox cityManage;
    private javax.swing.JCheckBox cityRead;
    private javax.swing.JCheckBox couManage;
    private javax.swing.JCheckBox couRead;
    private javax.swing.JCheckBox cusManage;
    private javax.swing.JCheckBox cusRead;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JTextField descriptioTF;
    private javax.swing.JCheckBox empManage;
    private javax.swing.JCheckBox empRead;
    private javax.swing.JTextField emriTF;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox objManage;
    private javax.swing.JCheckBox objRead;
    private javax.swing.JCheckBox ordRead;
    private javax.swing.JCheckBox proManage;
    private javax.swing.JCheckBox proRead;
    private javax.swing.JCheckBox reqMake;
    private javax.swing.JCheckBox reqRead;
    private javax.swing.JCheckBox salMake;
    private javax.swing.JButton saveBtn;
    private javax.swing.JCheckBox supManage;
    private javax.swing.JCheckBox supRead;
    private javax.swing.JTable tabela;
    private javax.swing.JCheckBox titleManage;
    private javax.swing.JCheckBox titleRead;
    private javax.swing.JCheckBox userManage;
    private javax.swing.JCheckBox userRead;
    // End of variables declaration//GEN-END:variables
}
